// Пошук всіх записів в колекції
db.students.find().pretty();

//Таким чином добавляються рекорди в колекцію
db.students.insert({
    model: "Kawasaki",
    price: "90000",
    year: 2008
})

//ТАким чином ведеться пошук окремого рекорда.
db.students.find({model: "Kawasaki"})

db.students.insert({
    name: "Dima",
    proffesion: 'Barista',
    year: 1999,
//Можна записувати масиви.    
    cars: [
        'Volvo',
        'Lada',
        'Audi'
    ]
})
// Шукаєм всі записи де name: "Dima"
db.students.find({
    name: "Dima"
}).pretty()
//_________________________________________________________________

//Шукаєм куратора 7 класу =)
db.teacher.find({
    class_curator: 7
})

//__________________________________________________________________________________________________________________________________________
//Оператори порівняння
//__________________________________________________________________________________________________________________________________________

//Шукаєм кураторів класі більше ніж 5 $gte - greater then eaqles - більше дорівнює ">="
db.teacher.find({
    class_curator: {
        $gte: 5
    }
})

// $gt - greater then більше ніж чітко більше ніж значення ">"
db.teacher.find({
    class_curator: {
        $gt: 5
    }
})

// $lte - less then eaqles - менше дорівнює "<="
db.teacher.find({
    class_curator: {
        $lte: 5
    }
})

// $lt - less then - менше ніж "<"
db.teacher.find({
    class_curator:{
        $lt: 5
    }
})

// $ne - not eaqle - не дорівнює "!="
db.teacher.find({
    class_curator:{
        $ne: 5
    }
})

//___________________________________________________________________
//Вибірки
//___________________________________________________________________

//Таким чином ми знаходим всіх кураторів класів які менше 5, але вибираєм тільки name і lesson
db.teacher.find(
    {
        class_curator: {
            $lt: 5
        }
    },
    {
        "name": true,
        "lesson": true,
        "_id": false // Щоб не витягувалась _id вказуєм такий параметр           
    }
);

// Якщо ми хочемо вибрати якесь значення яке знаходиться в масиві тоді ми вписуєм його в лапках як в даному прикладі.
db.students.find({
    "parents.name": "Dima"
})


//_____________________________________________________________________________________
//$or, $and
//_____________________________________________________________________________________

// Таким чином ми використовуєм оператор $or - або. В даному випадку ми виводим кураторів 4 або 3 класів або там де payment 2000. аналог ||
db.teacher.find({
    $or: [
        {
            class_curator: 3
        },
        {
            class_curator: 4
        },
        {
            payment: 2000
        }
    ]
})

// Таким чином ми використовуєм оператор $and -і. В даному випадку ми виводим всіх кураторів 5 класів і з зарплатою у 2000. аналог &&
db.teacher.find({
    $and: [
        {
            class_curator: 5
        },
        {
            payment: 2000
        }
    ]
})

// Для прикладу зробим вибірку - де виберем всіх кураторів більше 5 класу і зарплатою менше або дорівнює 3000
db.teacher.find({
    $and: [
        {
            class_curator: {
                $gt: 5
            }
        },
        {
            payment: {
                $lte: 3000

            }
        }
    ]
})


//_____________________________________________________________________________________
// Sorting
//_______________________________________________________________________________________

//Таким чином ми посортували всі рекорди по параметру "payment" по зростанню аналог ASC
db.teacher.find().sort({"payment": 1})

//Таким чином ми посортували всі рекорди по параметру "payment" по спаданню аналог DESK
db.teacher.find().sort({"payment": -1})

// Таким чином можем посортувати і по іменам в алфавітному порядку з початку а якщо -1 то з кінця.
db.teacher.find().sort({"name": 1})


//_________________________________________________________________________________________________
// Limit
//__________________________________________________________________________________________________

//Таким чином ми вказуєм ліміти в даному випадку визачаєм самого дорогого викладача.
db.teacher.find().sort({"payment": -1}).limit(1)

//skip це аналог offset який вказує скільки рекордів вибірки пропустити.
db.teacher.find().sort({"payment": -1}).skip(2).limit(1)


//____________________________________________________________________________________________________
//Update
//____________________________________________________________________________________________________

db.teacher.update(
    {},//Перший обєкт це обєкт пошуку
    {},//Другий обєкт вказує що на що ми міняєм.
    {} //Третій обєкт це обєк  налаштувань
    
)

// Якщо вказати такі параметри тоді знайде першого в якого "payment": 2000 і замінить весь рекорд на "car": true
db.teacher.update(
    {
        "payment": 2000
    },
    {
        "car": true
    }
)


// Таким чином ми добавляєм нові поля до існуючих рекордів які підпаають під ці параметри обовязковий параметр $set.
db.teacher.update(
    {
        "payment": 2500
    },
    {
        $set: {
            car: true,
            dog: "Charlie"
        }
    },
    {
        multi: true // Цей параметр вказує шукати всіх хто підпадає під параметри пошуку а не тільки перший 
    }
)


//_______________________________________________________________________________________________________
// Agregate
//_______________________________________________________________________________________________________

//Функція агрегації приймає масив, а в ньому передаэм обэкти агрегації, за допомогою агрегацій можемо сортувати групувати фільтрувати і т.д.
db.teacher.aggregate([
    // Агрегації виконуються одна за одною
    {}, //1
    {}, //2
    {} //3
])



db.teacher.aggregate([
    {
        $match: { //$match працює як WHERE в SQL таким записом ми вибираєм всі записи де car: true
            car: true
        }
    }
])


db.teacher.aggregate([
    {
        $match: {
            car: true
        }
    },
    { // Результат першої агрегатки передається в другу
        $group: { //Обовязково треба згрупувати
            "_id": "payment", // Вказати id і над яким значенням ми проводим групування якщо вказати через $ воно буде додавати однакові значення і виводити їх по черзі
            "paymentSum": {
                $sum: "$payment" // Таким чином ми виводим суму всіх зарплат вчителів які як ми памятаєм мають car: true тому що спрацювала перша агрегація
            }
        }
    }
])

// Таким чином ми виводим середню суму всіх зп
db.teacher.aggregate([
    {
        $group: {
            "_id": "payment",
            "paymentAvg": {
                $avg: "$payment"
            }
        }
    }
])

// Таким чином ми виводим максимальну зп
db.teacher.aggregate([
    {
        $group: {
            "_id": "payment",
            "paymentMax": {
                $max: "$payment"
            }
        }
    }
])

// Таким чином ми виводим мінімальну зп
db.teacher.aggregate([
    {
        $group: {
            "_id": "payment",
            "paymentMіт": {
                $min: "$payment"
            }
        }
    }
])


//Таким чином ми рахуєм кількість машин в тічерів
db.teacher.aggregate([
    {
        $group: {
            "_id": "$car",
            "carCount": {
                $sum: 1
            }
        
        }
    }
])



db.teacher.remove({
    car: true
})
















